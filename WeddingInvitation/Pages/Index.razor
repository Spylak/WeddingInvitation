@page "/"
@inject NavigationManager _navMan
@inject IJSRuntime _jsRuntime
@inject ILocalStorageService _localStorage
@using System.Timers
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@using System.Text
@inject ApiClient _client

<PageTitle>Index</PageTitle>

<div style="background-image: url(images/chania.jpg);background-repeat: no-repeat;background-size: cover;width: 100vw;height: 100vh  ">
    <MudCarousel Style="height: 80%; color: #ffcd39;top: 5%" @bind-SelectedIndex="count" ShowDelimiters="true" ShowArrows="false" AutoCycle="false" TData="object">
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img @onclick="OnClick" style="cursor: pointer;border-radius: 5px" height="90%" width="60%" src="images/eventImg1.jpg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img style="cursor: pointer;border-radius: 5px" @onclick="OnClick" height="90%" width="60%" src="images/invitation.jpeg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img style="cursor: pointer;border-radius: 5px" @onclick="OnClick" height="90%" width="60%" src="images/invitation1.jpg"/>
        </MudCarouselItem>
    </MudCarousel>
    <div style="text-align: center;margin-top: 50px">
        <MudButton Variant="Variant.Filled" Disabled="@(disabled["Yes"])" Color="Color.Info" OnClick="@(() => OnSubmit("Yes"))">We will come!</MudButton>
        <MudButton Variant="Variant.Filled" Disabled="@(disabled["No"])" Color="Color.Error" OnClick="@(() => OnSubmit("No"))">We can't come.</MudButton>
    </div>
</div>


@code{


    public string Name { get; set; } = "";

    private Dictionary<string, bool> disabled = new Dictionary<string, bool>()
    {
        {"Yes", false},
        {"No", false}
    };
    private int count = 0;
    private string AnimationEntrance = "animate__animated animate__rotateInDownLeft";
    private string AnimationExit = "animate__animated animate__rotateOutUpLeft";

    private async Task OnClick()
    {
        count++;
        if (count > 2)
        {
            count = 0;
        }
    }

    Timer timer = new Timer();

    private async Task OnSubmit(string answer)
    {
        disabled[answer] = true;
        var guestList = new List<Guest>();
        var getResult = await _client.GetAsync("Guest/Get");
        var body = await getResult.Content.ReadAsStringAsync();
        var b2 = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(body);
        foreach (var item in b2)
        {
            var newGuest = new Guest();
            newGuest.Name = item["name"];
            newGuest.Answer = item["answer"];
            newGuest.Date = item["date"];
            guestList.Add(newGuest);
        }
        var guest = new Guest();
        guest.Name = Name;
        guest.Answer = answer;
        guest.Date =DateTime.Now.ToString("dd.MM.yyyy HH:mm");
        var requestContent = new StringContent(JsonSerializer.Serialize(guest), Encoding.UTF8, "application/json");

        if(guestList.Select(i => i.Name).Contains(guest.Name))
        {
            var rowId = guestList.Select(i => i.Name).ToList().IndexOf(guest.Name) + 1;
            Console.WriteLine(rowId);
            var putResult = await _client.PutAsync($"/guest/put/{rowId}", requestContent);
        }
        else
        {
            var postResult = await _client.PostAsync("/guest/post", requestContent);
        }
        disabled[answer] = false;
    }

    protected async override void OnInitialized()
    {
        timer.Interval = 6000;
        timer.Elapsed += async (_, _) => await OnClick();
        var uri = _navMan.ToAbsoluteUri(_navMan.Uri);
    // if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("admin", out var admin))
    // {
    //     if (admin=="true")
    //     {
    //         _navMan.NavigateTo("/admin");
    //     }
    // }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var name))
        {
            Name = name;
            await _localStorage.SetItemAsync("name", Name);
            await _jsRuntime.InvokeVoidAsync("window.history.pushState", new {additionalInformation = "Updated the URL with JS"}, null, _navMan.BaseUri);
        }
        if (Name == "")
        {
            Name = await _localStorage.GetItemAsync<string>("name");
        }
    }


}