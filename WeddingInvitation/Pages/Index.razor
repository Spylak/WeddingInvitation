@page "/"
@inject NavigationManager _navMan
@inject IJSRuntime _jsRuntime
@inject ILocalStorageService _localStorage
@using System.Timers
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@using System.Text
@using WeddingInvitation.Components
@inject ApiClient _client
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Invitation</PageTitle>

<div style="background-color: white;background-size: cover;width: 100vw;height: 100vh;">
    <MudCarousel Style="height: 95%;width: 50%;top: 2%;margin: auto !important" @bind-SelectedIndex="count" ShowBullets="true" BulletsClass="bullets" ShowArrows="false" AutoCycle="false" TData="object">
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img @onclick="OnClick" style="cursor: pointer;border-radius: 5px" height="90%" width="60%" src="images/mainPic.jpg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img style="cursor: pointer;border-radius: 5px" @onclick="OnClick" height="100%" width="80%" src="images/churchInv.jpg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img style="cursor: pointer;border-radius: 5px" @onclick="OnClick" height="90%" width="100%" src="images/icecream.jpg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
           <MudButton>Hello</MudButton>
        </MudCarouselItem>
    </MudCarousel>
    @* <div style="text-align: center;margin-top: 30px"> *@
    @*     <MudGrid> *@
    @*         <MudItem xs="6"> *@
    @*                     <MudButton Variant="Variant.Filled" Disabled="@(disabled["Yes"])" Color="Color.Info" OnClick="@(() => OnSubmit("Yes"))">We will come!</MudButton> *@
    @*         </MudItem> *@
    @*         <MudItem xs="6"> *@
    @*                     <MudButton Variant="Variant.Filled" Disabled="@(disabled["No"])" Color="Color.Error" OnClick="@(() => OnSubmit("No"))">We can't come.</MudButton> *@
    @*         </MudItem> *@
    @*         <MudItem xs="6"> *@
    @*                     <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => AddSong())">Add a song!</MudButton> *@
    @*         </MudItem>  *@
    @*         <MudItem xs="6" Style="text-align: center"> *@
    @*             <MudTextField @bind-Value="Guest.Song" Variant="Variant.Outlined" ReadOnly="true" Style="background-color: #6610f2;height: 40px;width: 150px;color: #ffcd39;margin:-5px auto auto"></MudTextField> *@
    @*         </MudItem> *@
    @*     </MudGrid> *@
    @* </div> *@
</div>

<style>
    .bullets{
    color: #92C3D9;
    }
</style>

@code{

    
    private string Name { get; set; } = "";
    private Guest Guest { get; set; } = new Guest() {Song = "Song"};
    private Dictionary<string, bool> disabled = new Dictionary<string, bool>()
    {
        {"Yes", false},
        {"No", false}
    };
    private int count = 0;
    private string AnimationEntrance = "animate__animated animate__fadeIn";
    private string AnimationExit = "animate__animated animate__fadeOut";

    private async Task OnClick()
    {
        count++;
        if (count > 3)
        {
            count = 0;
        }
    }

    public async Task AddSong()
    {
        var parameters = new DialogParameters { ["song"]=Guest.Song };

        var dialog = DialogService.Show<SongDialog>("Add a song.", parameters);
        var result = await dialog.Result;
        if (result.Data is not null)
        {
            Guest.Song = result.Data.ToString();
        }
    }
    Timer timer = new Timer();

    private async Task OnSubmit(string answer)
    {
        disabled[answer] = true;
        var guestList = new List<Guest>();
        var getResult = await _client.GetAsync("Guest/Get");
        var body = await getResult.Content.ReadAsStringAsync();
        var b2 = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(body);
        foreach (var item in b2)
        {
            var newGuest = new Guest();
            newGuest.Name = item["name"];
            newGuest.Answer = item["answer"];
            newGuest.Date = item["date"];
            guestList.Add(newGuest);
        }
        Guest.Name = Name;
        Guest.Answer = answer;
        Guest.Date =DateTime.Now.ToString("dd.MM.yyyy HH:mm");
        var requestContent = new StringContent(JsonSerializer.Serialize(Guest), Encoding.UTF8, "application/json");

        if(guestList.Select(i => i.Name).Contains(Guest.Name))
        {
            var rowId = guestList.Select(i => i.Name).ToList().IndexOf(Guest.Name) + 1;
            Console.WriteLine(rowId);
            var putResult = await _client.PutAsync($"/guest/put/{rowId}", requestContent);
        }
        else
        {
            var postResult = await _client.PostAsync("/guest/post", requestContent);
        }
        disabled[answer] = false;
        Snackbar.Add("Answer Saved!", Severity.Success);
    }

    protected async override void OnInitialized()
    {
        timer.Interval = 6000;
        timer.Elapsed += async (_, _) => await OnClick();
        var uri = _navMan.ToAbsoluteUri(_navMan.Uri);
    // if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("admin", out var admin))
    // {
    //     if (admin=="true")
    //     {
    //         _navMan.NavigateTo("/admin");
    //     }
    // }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var name))
        {
            Name = name;
            await _localStorage.SetItemAsync("name", Name);
            await _jsRuntime.InvokeVoidAsync("window.history.pushState", new {additionalInformation = "Updated the URL with JS"}, null, _navMan.BaseUri);
        }
        if (Name == "")
        {
            Name = await _localStorage.GetItemAsync<string>("name");
        }
    }


}