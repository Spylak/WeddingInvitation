@page "/"
@inject NavigationManager _navMan
@inject IJSRuntime _jsRuntime
@inject ILocalStorageService _localStorage
@using System.Timers
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@using System.Text
@using WeddingInvitation.Components
@inject ApiClient _client
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Invitation</PageTitle>
@if (!isLoading)
{
    <div style="background-color: white;background-size: cover;width: 100vw;height: 100vh;">
    <MudCarousel Style="height: 95%;top: 2%;margin: auto !important" @bind-SelectedIndex="count" ShowBullets="true" BulletsClass="bullets" BulletsPosition="Position.Bottom" ShowArrows="false" AutoCycle="false" TData="object">
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img @onclick="OnClick" class="firstType" src="images/mainPic.jpg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img class="secondType" @onclick="OnClick" src="images/churchInv.jpg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
            <img class="thirdType" @onclick="OnClick" src="images/icecream.jpg"/>
        </MudCarouselItem>
        <MudCarouselItem Style="text-align: center;" Transition="Transition.Custom" CustomTransitionEnter="@AnimationEntrance" CustomTransitionExit="@AnimationExit">
           <EditForm Model="@Guest" OnValidSubmit="OnSubmit">
            <MudRadioGroup @bind-SelectedOption="Answer" Style="display: inline-grid">
                <MudRadio  Option="true" Color="Color.Info" >Δε το χάνω με τίποτα!</MudRadio>
                <MudRadio  Option="false" Color="Color.Info" >Θα είμαι εκεί με το πνεύμα!</MudRadio>
            </MudRadioGroup>
            <br/>
            <br/>
            <p class="mud-typography-body1">Θα χορέψω με την καρδιά μου αν παίξει το</p>
            <div style="display: flex">
                <p class="mud-typography-body1" style="margin-left: auto;text-align: start;width: 120px">Τραγούδι:</p>
                <MudInput @bind-Value="Song" Style="margin-right: auto;height: 25px" T="string"></MudInput>
            </div>
            <div style="display: flex">
                <p class="mud-typography-body1" style="margin-left: auto;text-align: start;width: 120px">Καλλιτέχνης:</p>    
                <MudInput @bind-Value="Artist"  Style="margin-right: auto;height: 25px"  T="string"></MudInput>
            </div>
            <br/>
            <br/>
            <div>
                <p class="mud-typography-body1">Παρακαλούμε ενημερώστε μας για την παρουσία σας έως την 1 Ιουλίου</p>
                <p class="mud-typography-body1">Ζωή: 6972666379  &  Δημήτρης: 6942444897</p>
                <br/>
                <p>Προαιρέτικη Λίστα Γάμου</p>
                <p>Τράπεζα Πειραιώς IBAN: GR56 0172 7580 0057 5807 5820 257</p>
            </div>
           <MudButton  ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info">Αποστολή</MudButton>
           </EditForm>
        </MudCarouselItem>
    </MudCarousel>
</div>
}

<style>
.firstType{
cursor: pointer;
border-radius: 5px;
height:90%;
width:40%;
}
.thirdType{
cursor: pointer;
border-radius: 5px;
height:100%;
width:90%;
}
.secondType{
cursor: pointer;
border-radius: 5px;
height:100%;
width:70%;
}
    .bullets{
    color: #92C3D9;
    }
    @@media only screen and (max-width:700px){
       .secondType {
         width:400px;
       }
       .firstType{
         width: 80vw;
         height: 75% ;
       }
       .thirdType{
        width: 110vw;
        height: 60%;
       }
    }
    .mud-typography-body1{
    font-size: 18px;
    font-family: 'Segoe UI';
    }
</style>

@code{

    public bool Answer { get; set; } = true;
    private string Name { get; set; } = "";
    private string Song { get; set; } = "";
    private string Artist { get; set; } = "";
    private Guest Guest { get; set; } = new Guest() { Song = "Song" };
    private int count = 0;
    private string AnimationEntrance = "animate__animated animate__fadeIn";
    private string AnimationExit = "animate__animated animate__fadeOut";
    private bool isLoading = false;
    private async Task OnClick()
    {
        count++;
        if (count > 3)
        {
            count = 0;
        }
    }

    Timer timer = new Timer();

    private async Task OnSubmit()
    {
        isLoading = true;
        var guestList = new List<Guest>();
        var getResult = await _client.GetAsync("Guest/Get");
        var body = await getResult.Content.ReadAsStringAsync();
        var b2 = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(body);
        foreach (var item in b2)
        {
            var newGuest = new Guest();
            newGuest.Name = item["name"];
            newGuest.Answer = item["answer"];
            newGuest.Date = item["date"];
            guestList.Add(newGuest);
        }
        Guest.Name = Name;
        Guest.Answer = Answer?"Yes":"No";
        Guest.Song = Song + "-" + Artist;
        Guest.Date = DateTime.Now.ToString("dd.MM.yyyy HH:mm");
        var requestContent = new StringContent(JsonSerializer.Serialize(Guest), Encoding.UTF8, "application/json");

        if (guestList.Select(i => i.Name).Contains(Guest.Name))
        {
            var rowId = guestList.Select(i => i.Name).ToList().IndexOf(Guest.Name) + 1;
            Console.WriteLine(rowId);
            var putResult = await _client.PutAsync($"/guest/put/{rowId}", requestContent);
        }
        else
        {
            var postResult = await _client.PostAsync("/guest/post", requestContent);
        }
        isLoading = false;
        Snackbar.Add("Answer Saved!", Severity.Success);
    }

    protected async override void OnInitialized()
    {
        timer.Interval = 6000;
        timer.Elapsed += async (_, _) => await OnClick();
        var uri = _navMan.ToAbsoluteUri(_navMan.Uri);
    // if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("admin", out var admin))
    // {
    //     if (admin=="true")
    //     {
    //         _navMan.NavigateTo("/admin");
    //     }
    // }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var name))
        {
            Name = name;
            await _localStorage.SetItemAsync("name", Name);
            await _jsRuntime.InvokeVoidAsync("window.history.pushState", new { additionalInformation = "Updated the URL with JS" }, null, _navMan.BaseUri);
        }
        if (Name == "")
        {
            Name = await _localStorage.GetItemAsync<string>("name");
        }
    }


}